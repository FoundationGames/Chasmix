{
    mxn: classes[c -> c.name = "foundationgames/chasmix/test/resources/mixin/TestMethodMerging"][0], 
    trg: classes[c -> c.name = "foundationgames/chasmix/test/resources/targets/MethodTestTarget"][0], 
    insn_reparent: i -> map({
        list: i, 
        func: ix -> ix.owner = mxn.name ? ix + {
            owner: trg.name
        } : ix
    }), 
    method_reparent: m -> m + {
        code: m.code + {
            instructions: insn_reparent(m.code.instructions)
        }
    }, 
    method_desc: m -> "(" + reduce({
        list: map({
            list: m.parameters, 
            func: p -> p.type
        }) + [""], 
        func: p -> p.first + p.second
    }) + ")" + m.returnType, 
    transformations: [{
            target: {
                node: trg.interfaces, 
                start: 0, 
                end: 0
            }, 
            apply: args -> mxn.interfaces[mxni -> len(args.target[trgi -> trgi = mxni]) = 0]
        },{
            target: {
                node: trg.methods, 
                start: 0, 
                end: 0
            }, 
            apply: x -> [method_reparent(mxn.methods[mxnm -> mxnm.name = "newMethod" && method_desc(mxnm) = "()V"][0])]
        },{
            target: {
                node: trg.methods, 
                start: 0, 
                end: 0
            }, 
            apply: x -> [method_reparent(mxn.methods[mxnm -> mxnm.name = "newStaticMethod" && method_desc(mxnm) = "()V"][0])]
        },{
            target: {
                node: trg.methods, 
                start: 0, 
                end: 0
            }, 
            apply: x -> [method_reparent(mxn.methods[mxnm -> mxnm.name = "quack" && method_desc(mxnm) = "(Z)V"][0])]
        }]
}
